/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Games;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-05T13:20:02.674Z")

@Api(value = "game", description = "the game API")
public interface GameApi {

    @ApiOperation(value = "Create Game", notes = "", response = Void.class, tags={ "game", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class) })
    
    @RequestMapping(value = "/game/createGame",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createGame(@ApiParam(value = "List of Games object" ,required=true )  @Valid @RequestBody Games body);


    @ApiOperation(value = "Delete Game", notes = "This can only be done by the logged in user.", response = Void.class, tags={ "game", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Delete Game success", response = Void.class),
        @ApiResponse(code = 400, message = "Invalid Game supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Game not found", response = Void.class) })
    
    @RequestMapping(value = "/game/{gameId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteGameByGameId(@ApiParam(value = "The id that needs to be delete this Game",required=true ) @PathVariable("gameId") String gameId);


    @ApiOperation(value = "Get All Games", notes = "This can all user can use.", response = Games.class, responseContainer = "List", tags={ "game", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Games.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid Game supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Game not found", response = Void.class) })
    
    @RequestMapping(value = "/game",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Games>> getAllgames();


    @ApiOperation(value = "Get One Game", notes = "This can all user can use.", response = Games.class, tags={ "game", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Games.class),
        @ApiResponse(code = 400, message = "Invalid Game supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Game not found", response = Void.class) })
    
    @RequestMapping(value = "/game/{gameId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Games> getOneGameByGameId(@ApiParam(value = "The id that needs to get this Game",required=true ) @PathVariable("gameId") String gameId);

}
