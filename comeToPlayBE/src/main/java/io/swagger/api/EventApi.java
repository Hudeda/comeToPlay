/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Event;

import io.swagger.annotations.*;
import io.swagger.model.JoinUserParams;
import io.swagger.model.User;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-05T13:20:02.674Z")

@Api(value = "event", description = "the event API")
public interface EventApi {

    @ApiOperation(value = "Create event", notes = "", response = String.class, tags = {"event",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = String.class)})

    @RequestMapping(value = "/event/createEvent",
            produces = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<String> addEvent(@ApiParam(value = "List of Event object", required = true) @Valid @RequestBody Event body);


    @ApiOperation(value = "Get All Events", notes = "This can all user can use.", response = Event.class, responseContainer = "List", tags = {"event",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Event.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Invalid Event supplied", response = Void.class),
            @ApiResponse(code = 404, message = "Event not found", response = Void.class)})

    @RequestMapping(value = "/events",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Event>> getAllEvents();


    @ApiOperation(value = "Delete Event", notes = "This can only be done by the logged in user.", response = Void.class, tags = {"event",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Delete success", response = Void.class),
            @ApiResponse(code = 400, message = "Invalid Event supplied", response = Void.class),
            @ApiResponse(code = 404, message = "Event not found", response = Void.class)})

    @RequestMapping(value = "/event/{eventId}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEventByEventId(@ApiParam(value = "The id that needs to be delete this Event", required = true) @PathVariable("eventId") String eventId);


    @ApiOperation(value = "Get One Event", notes = "This can all user can use.", response = Event.class, tags = {"event",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Event.class),
            @ApiResponse(code = 400, message = "Invalid Event supplied", response = Void.class),
            @ApiResponse(code = 404, message = "Event not found", response = Void.class)})

    @RequestMapping(value = "/event/{eventId}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Event> getEventsByEventId(@ApiParam(value = "The id that needs to get this Event", required = true) @PathVariable("eventId") String eventId);


    @ApiOperation(value = "Create event", notes = "", response = Void.class, tags = {"event",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Void.class)})

    @RequestMapping(value = "/event/joinUser",
            produces = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Void> joinUserToEvent( @NotNull@ApiParam(value = "event that user want to join", required = true) @RequestParam(value = "eventId", required = true) String eventId, @NotNull@ApiParam(value = "id of usrt thst join to event", required = true) @RequestParam(value = "userId", required = true) String userId);
}