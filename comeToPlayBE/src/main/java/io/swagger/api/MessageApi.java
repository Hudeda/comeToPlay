/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;


import io.swagger.model.Message;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-05T13:20:02.674Z")

@Api(value = "message", description = "the message API")
public interface MessageApi {

    @ApiOperation(value = "Create Message", notes = "", response = Void.class, tags={ "message", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class) })
    
    @RequestMapping(value = "/message/createMessage",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createMessage(@ApiParam(value = "List of mssages object" ,required=true )  @Valid @RequestBody Message body);


    @ApiOperation(value = "Delete Message", notes = "This can only be done by the logged in user.", response = Void.class, tags={ "message", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Delete Message success", response = Void.class),
        @ApiResponse(code = 400, message = "Invalid Message supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Message not found", response = Void.class) })
    
    @RequestMapping(value = "/message/{messageId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteMessageByMessageId(@ApiParam(value = "The id that needs to be delete this Message",required=true ) @PathVariable("messageId") String messageId);


    @ApiOperation(value = "Get All Messages", notes = "This can all user can use.", response = Message.class, responseContainer = "List", tags={ "message", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Message.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid Message supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Message not found", response = Void.class) })
    
    @RequestMapping(value = "/message",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Message>> getAllMessages();


    @ApiOperation(value = "Get One message", notes = "This can all user can use.", response = Message.class, tags={ "message", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Message.class),
        @ApiResponse(code = 400, message = "Invalid Message supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Messsage not found", response = Void.class) })
    
    @RequestMapping(value = "/message/{messageId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Message> getOneMessageByMessageId(@ApiParam(value = "The id that needs to get this Message",required=true ) @PathVariable("messageId") String messageId);

}
